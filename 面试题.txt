1

1.浮动会导致父盒子无法被撑开,所以可以直接设置父盒子的高度,但是这样会导致盒子不灵活,不方便维护

2.在子盒子的最后添加一个空的盒子,这个盒子不需要宽高,只需要设置clear:both

3.使用伪元素在盒子末尾添加一个盒子,并添加clear:both

4.使用overflow：hidden

2

​	position有五个值:

​		relative ： 相对定位,相对于自身的初始位置进行定位,并且继续占有原来的位置

​		absolute :绝对定位,相对于有定位的父盒子进行定位,如果父盒子没有定位，则以窗口位置进行定位，同时margin：auto将失效

​		fixed : 相对于窗口进行定位,到达指定的位置后不再移动

​		sticky : 粘性定位,以窗口作为定位目标,到达定位点后固定在该位置

​		static : 默认值

3

​	有八种类型:

​		number,string,boolean,null,undefined,symbol,object,bigint

​		会被转换为false的：0，"",null,undefined,NaN

4

​	简单来说作用域就是{}内就是一个作用域,从js底层来说，拿函数进行演示,js的解析的时候解析到函数的时候就会将当前函数保存到内存中,并且创建一个对象来进行保存,这个对象主要有两个部分，一个函数体，一个就是父级作用域,一旦解析完成我们的函数执行,此时就会创建一个vo对象,这个对象中就包含了一个作用域链,由函数执行时创建的ao对象+其父级作用域，当函数执行时用到变量就需要通过这个作用域链进行查找,一直查找到最顶层的作用域,这个整个过程形成的链条状的就是作用域链

闭包也叫做词法闭包,也就是在词法分析阶段就已经确认了,并且闭包由两部分组成,一个就是闭包需要是一个函数,第二个就是有使用来自外部的自由变量,在广义的解释中，函数中的函数就是闭包,js在执行的时候创建了一个全局对象go,我们的window也在这个对象当中，同时进行压栈，所以js中的所有函数都可以称为闭包,但是在狭义的闭包中,我们把有使用外部自由变量的函数才叫做闭包，同时闭包容易导致内存泄漏,建议不使用之后将其置为null,以便垃圾回收

5undefined,哈哈哈，HELLO

​	在函数执行之前我们就创建了一个ao对象,由vo对象指向这个ao独享,ao对象中是当前函数的参数以及一些函数内定义的变量以及函数，由于函数还没有执行,都为undefined,当然,如果是函数的情况下则会为这个函数分配内存地址，所以此时函数内部有一个str为undefined，所以最开始输出undefined，然后赋值为哈哈哈，再进行输出,输出结束后销毁当前对象以及栈，在输出外部定义的HELLO

6undefined,Wooh

​	首先,可以看到两个函数调用都属于是隐式函数调用,隐式函数调用的前提就是这个方法必须在一个对象当中,所以两个方法调用的this都指向dog这个对象,但是需要注意的一点是,箭头函数没有this，他的this指向父级的this,于是我们就需要向外层寻找this,由于dog对象也没有this，所以继续向外层寻找,找到了window,window这个对象其实指向的就是js解析时创建的全局对象globalobject,于是this相当于指向这个对象,我们去这个对象中查找breed属性发现并没有,所以是undefined，第二个this指向dog，所以输出Wooh

7.let str = "gggjjggyyooppoooww";

let obj = {}

for(let i = 0 ; i < str.length ; i++){

  let c = str.charAt(i);

  if(obj[c]){

​    obj[c]++;

  }else{

​    obj[c] = 1

  }

}



*/\* 最大的长度 \*/*

let max = 0;

for(o in obj){

  if(obj[o] > max){

​    max = obj[o]

  }

}

console.log(obj);

console.log(max);

8

​	vue的生命周期由四个阶段

​		1.创建前后,在beforecreate阶段,vue实例和data都还没有初始化,都是undefined，在create阶段,data初始化完成,vue实例还未初始化，

​		2.载入前后，在beforemount阶段,data和vue实例都初始化完成,但是还没有渲染到dom，此时还是虚拟的dom，在mounted阶段,vue实例挂载完成

​	3.更新前后会触发beforeUpdate和updated

​	4.销毁，触发destroy,但此时dom结构依然存在

​	prop和data初始化在beforecreate和create之间

9.computed：一般用于购物车计算结果，这种多个值影响一个值，使用这个计算结果时,只要其所以来的变量没有发生改变就不会重新计算,会使用缓存下来的值，不支持异步

watch：一般用于搜索栏,当搜索栏发生变化时监听变化去请求数据，同时支持异步

10vuex属性：

​	state ： 状态树，相当于一个中心仓库，用于存放数据,不建议直接修改数据,可以使用mutation进行修改,一般将需要使用到的全局数据在这里进行初始化

​	mutation：主要用于修改当前vuex实例中的state的值,两个参数,第一个是当前vuex实例的state，第二个是提交mutation时传递的参数

​	getters：vuex的计算属性,和组件的计算属性一致,不同的是这个计算属性可以全局使用，有两个参数,第一个是当前vuex实例的state,第二个是当前vuex中的其他getters

​	actions ：用于提交一个mutation操作,并且可以进行一些异步的操作，一般用于需要操作后返回数据的,例如返回一个promise来接收

​	module： 可以将我们的vuex分解为多个模块,解决了只有一个单一的state的情况

11.

​	小程序生命周期：

​		1：onError:小程序出错时触发

​		2：onLaunch : 小程序初始化时触发

​		3：onShow：小程序正在使用

​		4：onHidden：小程序切后台	

页面生命周期

​		1.onReady：页面初次渲染完成

​		2.onLoad：页面加载

​		3.onShow：页面显示

​		4.onHidden：页面隐藏

​		5.onUnload : 页面卸载

	12.	小程序运行在手机端,h5使用的浏览器引擎,小程序中有许多内置组件，相对于h5来说相对简单,当然在小程序中也用到了一部分h5技术